#!/usr/bin/env bash
# shellcheck disable=SC2164

main() {
  srcpath="$(realpath "$0")"
  binpath="${srcpath%/*}"
  backend="$(realpath "${binpath}/../backend/")"

  [[ -s "$backend/backend" ]] || bail "could not locate backend at '$backend'"

  declare -Ag args
  for arg; do
    args["$arg"]=1
  done

  while read -r pkg type args; do
    if (( "${#args[@]}" > 0 )) && [[ -z "${args["${pkg#_}"]}" ]]; then
      continue
    fi

    if [[ "${pkg:0:1}" == "_" ]] \
       && command -v "${pkg#_}" >/dev/null 2>&1; then
      echo "'${pkg#_}' already in \$PATH, skipping"
      echo
      continue
    fi

    pkg="${pkg#_}"


    if "${type}_installed" "$pkg" "$args"; then
      "${type}_update" "$pkg" "$args"
    else
      "${type}_install" "$pkg" "$args"
      "${type}_link" "$pkg"
    fi
    echo
  done < "$backend/backend"
}

node_update() {
  echo "Updating node package '$1'"
  cd "$backend"
  _npm update "${2:-$1}"
}

node_install() {
  echo "Installing node package '$1'"
  cd "$backend"
  _npm install "${2:-$1}"
}

_npm() {
  npm "$@" --no-save --no-package-lock 2>&1 | awk '$0 !~ "WARN"'
}

node_link() {
  cd "$binpath"
  [[ -f "$1" && ! -L "$1" ]] && return

  bin="$(node_bin "$1")"

  echo "Creating symlink '$1'"
  ln -srf "$bin" "$1"
}

node_installed() {
  [[ -x "$(node_bin "$1")" ]]
}

node_bin() {
  realpath "$backend/node_modules/.bin/$1" 2>/dev/null
}

git_installed() {
  [[ -d "$backend/$1/.git" ]]
}

git_update() {
   read -r repo post <<< "$2"
   echo "Updating git repo '$1'"

   cd "$backend/$1" || bail

   git pull --recurse-submodules >/dev/null 2>&1 || bail

   case "$post" in
     cmake) cmake_build "$1";;
     gradle) gradle_build "$1";;
  esac
}

git_install() {
  set -o pipefail
  read -r repo post <<< "$2"
  echo "Installing git repo '$1'"
  cd "$backend"
  [[ -d "$1" ]] && rm -rf "${1?oops}"
  git clone --recursive "$repo" "$1" 2>&1 \
    | git_filter || bail

  cd "$1"

  git submodule update --init 2>&1 \
    | git_filter || bail

  case "$post" in
    cmake) cmake_build "$1";;
    gradle) gradle_build "$1";;
  esac
}

cmake_build() {
  mkdir -p build && cd build
  cmake .. -DCMAKE_BUILD_TYPE=Release \
           -DCMAKE_INSTALL_PREFIX="$backend" \
           -DCMAKE_EXPORT_COMPILE_COMMANDS=YES || bail

  printf "Building $1 ..."
  cmake --build . >/dev/null || bail
  echo "OK!"
  printf "Installing $1 ..."
  cmake --build . --target install >/dev/null || bail
  echo "OK!"

  cd "$binpath"
  for f in "$backend/bin/"*; do
    ln -srf "$f" "${f##*/}"
  done
}

gradle_build() {
  printf "Building $1 ..."
  TERM=xterm-color ./gradlew shadowJar >/dev/null 2>&1 || bail
  echo "OK!"

  [[ -x "$binpath/$1" ]] && return

  cat >"$binpath/$1" <<EOS
java -cp $backend/emmylua/EmmyLua-LS/build/libs/EmmyLua-LS-all.jar com.tang.vscode.MainKt
EOS

  chmod +x "$binpath/$1"
}

git_filter() {
  awk '
    /^remote/ { next }
  '
}

git_link() {
  :
}

bail() {
  printf '%s\n' "$@" >&2
  exit 1
}

main "$@"
